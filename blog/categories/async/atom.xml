<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: async | Olivier Lalonde's blog]]></title>
  <link href="http://syskall.com/blog/categories/async/atom.xml" rel="self"/>
  <link href="http://syskall.com/"/>
  <updated>2014-04-29T03:18:43+08:00</updated>
  <id>http://syskall.com/</id>
  <author>
    <name><![CDATA[Olivier Lalonde]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Executing multiple shell commands cleanly in Node.js with async]]></title>
    <link href="http://syskall.com/executing-multiple-shell-commands-cleanly-in-node-dot-js-with-async/"/>
    <updated>2013-05-27T18:04:00+08:00</updated>
    <id>http://syskall.com/executing-multiple-shell-commands-cleanly-in-node-dot-js-with-async</id>
    <content type="html"><![CDATA[<p><code>javascript
async.parallel([
  async.apply(exec, 'git rev-parse HEAD'),
  async.apply(exec, 'git symbolic-ref --short HEAD')
],
function (err, results) {
  console.log(results);
});
</code></p>

<p>First, the <code>async.parallel</code> call executes all functions in the array
concurrently. If you need the commands to be executed in order, use
<code>async.series</code> instead. <code>async.apply</code> returns the function passed as a
first argument with values already applied to its arguments and sets the
<code>async.parallel</code> callback for us. Finally, the last functions receives
the results in order when all functions have finished executing. It
preserves the order of results as you would expect them.</p>

<p>For more info:</p>

<p><a href="https://github.com/caolan/async">https://github.com/caolan/async</a></p>
]]></content>
  </entry>
  
</feed>
